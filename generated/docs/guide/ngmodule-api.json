{
  "id": "guide/ngmodule-api",
  "title": "NgModule API",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"ngmodule-api\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a>NgModule API</h1>\n<h4 translation-origin=\"off\" id=\"prerequisites\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#prerequisites\"><i class=\"material-icons\">link</i></a>Prerequisites</h4>\n<p translation-origin=\"off\">A basic understanding of the following concepts:</p>\n<p translation-result=\"\">对下列概念有基本的理解：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/bootstrapping\">Bootstrapping</a>.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript Modules vs. NgModules</a>.</p>\n</li>\n</ul>\n<hr>\n<h2 translation-origin=\"off\" id=\"purpose-of-ngmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#purpose-of-ngmodule\"><i class=\"material-icons\">link</i></a>Purpose of <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></h2>\n<p translation-origin=\"off\">At a high level, NgModules are a way to organize Angular apps\nand they accomplish this through the metadata in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>\ndecorator. The metadata falls\ninto three categories:</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><strong>Static:</strong> Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured via the <code>declarations</code> array.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>Runtime:</strong> Injector configuration via the <code>providers</code> array.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>Composability/Grouping:</strong> Bringing NgModules together and making them available via the <code>imports</code> and <code>exports</code> arrays.</p>\n</li>\n</ul>\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n  entryComponents: [], // Generate the host factory\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n</code-example>\n<h2 translation-origin=\"off\" id=\"ngmodule-metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-metadata\"><i class=\"material-icons\">link</i></a><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata</h2>\n<p translation-origin=\"off\">The following table summarizes the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n<p translation-result=\"\">下面是<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>元数据中属性的汇总表：</p>\n<table>\n  <tbody><tr>\n    <th>\n<p translation-origin=\"off\">      Property</p>\n<p translation-result=\"\">      属性</p>\n    </th>\n    <th>\n<p translation-origin=\"off\">      Description</p>\n<p translation-result=\"\">      说明</p>\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p translation-origin=\"off\">      <code>declarations</code></p>\n    </td>\n    <td>\n<p translation-origin=\"off\">      A list of <a href=\"guide/ngmodule-faq#q-declarable\">declarable</a> classes,\n(<em>components</em>, <em>directives</em>, and <em>pipes</em>) that <em>belong to this module</em>.</p>\n      <ol>\n        <li>\n<p translation-origin=\"off\">            When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives.</p>\n        </li>\n        <li>\n          The template is compiled within the context of an NgModule—the NgModule within which the template's component is declared—which determines the set of selectors using the following rules:\n          <ul>\n            <li>\n<p translation-origin=\"off\">                All selectors of directives listed in <code>declarations</code>.</p>\n            </li>\n            <li>\n<p translation-origin=\"off\">                All selectors of directives exported from imported NgModules.</p>\n            </li>\n          </ul>\n        </li>\n      </ol>\n<p translation-origin=\"off\">      Components, directives, and pipes must belong to <em>exactly</em> one module.\nThe compiler emits an error if you try to declare the same class in more than one module.</p>\n<p translation-result=\"\">      组件、指令和管道<em>只能</em>属于一个模块。\n如果尝试把同一个类声明在多个模块中，编译器就会报告一个错误。</p>\n<p translation-origin=\"off\">      Don't re-declare a class imported from another module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p translation-origin=\"off\">      <code>providers</code></p>\n    </td>\n    <td>\n<p translation-origin=\"off\">      A list of dependency-injection providers.</p>\n<p translation-result=\"\">      依赖注入提供商的列表。</p>\n<p translation-origin=\"off\">      Angular registers these providers with the NgModule's injector.\nIf it is the NgModule used for bootstrapping then it is the root injector.</p>\n<p translation-origin=\"off\">      These services become available for injection into any component, directive, pipe or service which is a child of this injector.</p>\n<p translation-origin=\"off\">      A lazy-loaded module has its own injector which\nis typically a child of the application root injector.</p>\n<p translation-origin=\"off\">      Lazy-loaded services are scoped to the lazy module's injector.\nIf a lazy-loaded module also provides the <code>UserService</code>,\nany component created within that module's context (such as by router navigation)\ngets the local instance of the service, not the instance in the root application injector.</p>\n<p translation-origin=\"off\">      Components in external modules continue to receive the instance provided by their injectors.</p>\n<p translation-origin=\"off\">      For more information on injector hierarchy and scoping, see <a href=\"guide/providers\">Providers</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p translation-origin=\"off\">      <code>imports</code></p>\n    </td>\n    <td>\n<p translation-origin=\"off\">      A list of modules which should be folded into this module. Folded means it is\nas if all the imported NgModule's exported properties were declared here.</p>\n<p translation-origin=\"off\">      Specifically, it is as if the list of modules whose exported components, directives, or pipes\nare referenced by the component templates were declared in this module.</p>\n<p translation-origin=\"off\">      A component template can <a href=\"guide/ngmodule-faq#q-template-reference\">reference</a> another component, directive, or pipe\nwhen the reference is declared in this module or if the imported module has exported it.\nFor example, a component can use the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>NgFor</code> directives only if the\nmodule has imported the Angular <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> (perhaps indirectly by importing <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>).</p>\n<p translation-origin=\"off\">      You can import many standard directives from the <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>\nbut some familiar directives belong to other modules.\nFor example, you can use <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> only\nafter importing the Angular <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p translation-origin=\"off\">      <code>exports</code></p>\n    </td>\n    <td>\n<p translation-origin=\"off\">      A list of declarations—<em>component</em>, <em>directive</em>, and <em>pipe</em> classes—that\nan importing module can use.</p>\n<p translation-result=\"\">      可供导入了自己的模块使用的可声明对象（<strong>组件</strong>、<strong>指令</strong>、<strong>管道类</strong>）的列表。</p>\n<p translation-origin=\"off\">      Exported declarations are the module's <em>public API</em>.\nA component in another module can <a href=\"guide/ngmodule-faq#q-template-reference\">use</a> <em>this</em>\nmodule's <code>UserComponent</code> if it imports this module and this module exports <code>UserComponent</code>.</p>\n<p translation-origin=\"off\">      Declarations are private by default.\nIf this module does <em>not</em> export <code>UserComponent</code>, then only the components within <em>this</em>\nmodule can use <code>UserComponent</code>.</p>\n<p translation-origin=\"off\">      Importing a module does <em>not</em> automatically re-export the imported module's imports.\nModule 'B' can't use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> just because it imported module 'A' which imported <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.\nModule 'B' must import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> itself.</p>\n<p translation-origin=\"off\">      A module can list another module among its <code>exports</code>, in which case\nall of that module's public components, directives, and pipes are exported.</p>\n<p translation-result=\"\">      一个模块可以把另一个模块加入自己的<code>exports</code>列表中，这时，另一个模块的所有公共组件、指令和管道都会被导出。</p>\n<p translation-origin=\"off\">      <a href=\"guide/ngmodule-faq#q-reexport\">Re-export</a> makes module transitivity explicit.\nIf Module 'A' re-exports <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> and Module 'B' imports Module 'A',\nModule 'B' components can use <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> even though 'B' itself didn't import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p translation-origin=\"off\">      <code>bootstrap</code></p>\n    </td>\n    <td>\n<p translation-origin=\"off\">      A list of components that are automatically bootstrapped.</p>\n<p translation-origin=\"off\">      Usually there's only one component in this list, the <em>root component</em> of the application.</p>\n<p translation-result=\"\">      通常，在这个列表中只有一个组件，也就是应用的<em>根组件</em>。</p>\n<p translation-origin=\"off\">      Angular can launch with multiple bootstrap components,\neach with its own location in the host web page.</p>\n<p translation-result=\"\">      Angular也可以引导多个引导组件，它们每一个都在宿主页面中有自己的位置。</p>\n<p translation-origin=\"off\">      A bootstrap component is automatically added to <code>entryComponents</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n<p translation-origin=\"off\">      <code>entryComponents</code></p>\n    </td>\n    <td>\n<p translation-origin=\"off\">      A list of components that can be dynamically loaded into the view.</p>\n<p translation-origin=\"off\">      By default, an Angular app always has at least one entry component, the root component, <code>AppComponent</code>. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.</p>\n<p translation-origin=\"off\">      Routed components are also <em>entry components</em> because they need to be loaded dynamically.\nThe router creates them and drops them into the DOM near a <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.</p>\n<p translation-origin=\"off\">      While the bootstrapped and routed components are <em>entry components</em>,\nyou don't have to add them to a module's <code>entryComponents</code> list,\nas they are added implicitly.</p>\n<p translation-origin=\"off\">      Angular automatically adds components in the module's <code>bootstrap</code> and route definitions into the <code>entryComponents</code> list.</p>\n<p translation-origin=\"off\">      That leaves only components bootstrapped using one of the imperative techniques, such as <a href=\"https://angular.io/api/core/ViewContainerRef#createComponent\"><code>ViewComponentRef.createComponent()</code></a> as undiscoverable.</p>\n<p translation-origin=\"off\">      Dynamic component loading is not common in most apps beyond the router. If you need to dynamically load components, you must add these components to the <code>entryComponents</code> list yourself.</p>\n<p translation-origin=\"off\">      For more information, see <a href=\"guide/entry-components\">Entry Components</a>.</p>\n<p translation-result=\"\">      要了解更多，参见<a href=\"guide/entry-components\">入口组件</a>一章。</p>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<h2 translation-origin=\"off\" id=\"more-on-ngmodules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#more-on-ngmodules\"><i class=\"material-icons\">link</i></a>More on NgModules</h2>\n<p translation-origin=\"off\">You may also be interested in the following:</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/feature-modules\">Feature Modules</a>.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/entry-components\">Entry Components</a>.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/providers\">Providers</a>.</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/module-types\">Types of Feature Modules</a>.</p>\n</li>\n</ul>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/RouterOutlet\n - guide/bootstrapping\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#more-on-ngmodules\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-metadata\n - guide/ngmodule-api#prerequisites\n - guide/ngmodule-api#purpose-of-ngmodule\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - https://angular.io/api/core/ViewContainerRef#createComponent\n-->"
}