{
  "id": "api/upgrade/static/UpgradeModule",
  "title": "\n      UpgradeModule\n    ",
  "contents": "\n\n<article>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          \n            {\n            \"@type\": \"ListItem\",\n            \"position\": 1,\n            \"item\": {\n              \"@id\": \"https://angular.io//api\",\n              \"name\": \"API\"\n            }\n          }\n            ,{\n            \"@type\": \"ListItem\",\n            \"position\": 2,\n            \"item\": {\n              \"@id\": \"https://angular.io/api/upgrade/static\",\n              \"name\": \"@angular/upgrade/static\"\n            }\n          }\n            ,{\n            \"@type\": \"ListItem\",\n            \"position\": 3,\n            \"item\": {\n              \"@id\": \"https://angular.io/api/upgrade/static/UpgradeModule\",\n              \"name\": \"UpgradeModule\"\n            }\n          }\n        ]\n      }\n      </script>\n    \n      \n      <a href=\"/api\">API</a>\n    \n      /\n      <a href=\"api/upgrade/static\">@angular/upgrade/static</a>\n    \n  </div>\n  <header class=\"api-header\">\n    \n    <label class=\"api-status-label experimental\">experimental</label>\n    \n    <label class=\"api-type-label class\">class</label>\n    <h1 id=\"upgrademodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#upgrademodule\"><i class=\"material-icons\">link</i></a>\n      UpgradeModule\n    </h1>\n    <span class=\"version\"></span>\n  </header>\n  <div class=\"page-actions\">\n      <a href=\"api/upgrade/static/UpgradeModule#\"><label class=\"raised page-label\"><i class=\"material-icons\">mode_edit</i>suggest edits</label></a>\n      <a href=\"https://github.com/angular/angular/tree/6.0.0-beta.5/packages/upgrade/src/static/upgrade_module.ts#L17-L275\"><label class=\"raised page-label\"><i class=\"material-icons\">code</i>view source</label></a>\n  </div>\n\n  <div class=\"api-body\">\n    \n  <p></p><p translation-origin=\"off\"><em>Part of the <a href=\"api?query=upgrade%2Fstatic\">upgrade/static</a>\nlibrary for hybrid upgrade apps that support AoT compilation</em></p>\n<p translation-origin=\"off\">Allows AngularJS and Angular components to be used together inside a hybrid upgrade\napplication, which supports AoT compilation.</p>\n<p translation-origin=\"off\">Specifically, the classes and functions in the <code><a href=\"api/upgrade/static\" class=\"code-anchor\">upgrade/static</a></code> module allow the following:\n1. Creation of an Angular directive that wraps and exposes an AngularJS component so\nthat it can be used in an Angular template. See <a href=\"api/upgrade/static/UpgradeComponent\"><code>UpgradeComponent</code></a>.\n2. Creation of an AngularJS directive that wraps and exposes an Angular component so\nthat it can be used in an AngularJS template. See <a href=\"api/upgrade/static/downgradeComponent\"><code>downgradeComponent</code></a>.\n3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\nservice so that it can be injected into an Angular context. See\n<a href=\"api/upgrade/static/UpgradeModule#upgrading-an-angular-1-service\">Upgrading an AngularJS service</a> below.\n4. Creation of an AngularJS service that wraps and exposes an Angular injectable\nso that it can be injected into an AngularJS context. See <a href=\"api/upgrade/static/downgradeInjectable\"><code>downgradeInjectable</code></a>.\n3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\ncoexisting in a single application. See the\n<a href=\"api/upgrade/static/UpgradeModule#example\">example</a> below.</p>\n<h2 translation-origin=\"off\" id=\"mental-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#mental-model\"><i class=\"material-icons\">link</i></a>Mental Model</h2>\n<p translation-origin=\"off\">When reasoning about how a hybrid application works it is useful to have a mental model which\ndescribes what is happening and explains what is happening at the lowest level.</p>\n<ol>\n<li>There are two independent frameworks running in a single application, each framework treats\nthe other as a black box.</li>\n<li>Each DOM element on the page is owned exactly by one framework. Whichever framework\ninstantiated the element is the owner. Each framework only updates/interacts with its own\nDOM elements and ignores others.</li>\n<li>AngularJS directives always execute inside the AngularJS framework codebase regardless of\nwhere they are instantiated.</li>\n<li>Angular components always execute inside the Angular framework codebase regardless of\nwhere they are instantiated.</li>\n<li>An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\ndefining an Angular directive, which bootstraps the AngularJS component at its location\nin the DOM. See <a href=\"api/upgrade/static/UpgradeComponent\"><code>UpgradeComponent</code></a>.</li>\n<li>An Angular component can be \"downgraded\"\" to an AngularJS component. This is achieved by\ndefining an AngularJS directive, which bootstraps the Angular component at its location\nin the DOM. See <a href=\"api/upgrade/static/downgradeComponent\"><code>downgradeComponent</code></a>.</li>\n<li>Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\nthe framework doing the instantiation. The other framework then instantiates and owns the\nview for that component.\na. This implies that the component bindings will always follow the semantics of the\ninstantiation framework.\nb. The DOM attributes are parsed by the framework that owns the current template. So\nattributes\nin AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.\nc. However the template binding syntax will always use the Angular style, e.g. square\nbrackets (<code>[...]</code>) for property binding.</li>\n<li>AngularJS is always bootstrapped first and owns the root component.</li>\n<li>The new application is running in an Angular zone, and therefore it no longer needs calls\nto\n<code>$apply()</code>.</li>\n</ol>\n<p></p>\n  \n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a> {\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#constructor()\">constructor(injector: Injector, ngZone: NgZone)</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#%24injector\">$injector: any</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#injector\">injector: Injector</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#ngZone\">ngZone: NgZone</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/static/UpgradeModule#bootstrap\">bootstrap(element: Element, modules: string[] = [], config?: any)</a>\n}\n</code-example>\n\n  \n  \n\n\n\n</section>\n\n  \n  \n    \n    \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p translation-origin=\"off\">This class is an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>, which you import to provide AngularJS core services,\nand has an instance method used to bootstrap the hybrid upgrade application.</p>\n<h2 translation-origin=\"off\" id=\"core-angularjs-services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#core-angularjs-services\"><i class=\"material-icons\">link</i></a>Core AngularJS services</h2>\n<p translation-origin=\"off\">Importing this <a href=\"api/core/NgModule\"><code>NgModule</code></a> will add providers for the core\n<a href=\"https://docs.angularjs.org/api/ng/service\">AngularJS services</a> to the root injector.</p>\n<h2 translation-origin=\"off\" id=\"bootstrap\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#bootstrap\"><i class=\"material-icons\">link</i></a>Bootstrap</h2>\n<p translation-origin=\"off\">The runtime instance of this class contains a <a href=\"api/upgrade/static/UpgradeModule#bootstrap\">`bootstrap()`</a>\nmethod, which you use to bootstrap the top level AngularJS module onto an element in the\nDOM for the hybrid upgrade app.</p>\n<p translation-origin=\"off\">It also contains properties to access the <a href=\"api/upgrade/static/UpgradeModule#injector\">root injector</a>, the\nbootstrap <a href=\"api/core/NgZone\"><code>NgZone</code></a> and the\n<a href=\"https://docs.angularjs.org/api/auto/service/$injector\">AngularJS $injector</a>.</p>\n\n</section>\n\n    \n\n    \n\n    \n    <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n    <a id=\"constructor()\"></a>\n<table class=\"is-full-width method-table constructor\">\n  \n  <tbody>\n    \n  \n    <tr>\n      <td>\n        \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">constructor(injector: <a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a>, ngZone: <a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a>)</code-example>\n\n  <h4 class=\"no-anchor\" id=\"parameters\">Parameters</h4>\n  <table class=\"is-full-width list-table parameters-table constructor-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"constructor-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>injector</td>\n      <td class=\"param-description\">\n              <p translation-origin=\"off\">The root <a href=\"api/core/Injector\"><code>Injector</code></a> for the upgrade application.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"constructor-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>ngZone</td>\n      <td class=\"param-description\">\n              <p translation-origin=\"off\">The bootstrap zone for the upgrade application</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n\n  \n      </td>\n    </tr>\n  \n  </tbody>\n</table>\n\n\n    \n<section class=\"instance-properties\">\n  <h2 id=\"properties\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#properties\"><i class=\"material-icons\">link</i></a>Properties</h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>Property</th><th>Type</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"$injector\"></a>$injector</td>\n        <td><label class=\"property-type-label\"><code>any</code></label></td>\n        <td>\n          <p translation-origin=\"off\">The AngularJS <code>$injector</code> for the upgrade application.</p>\n\n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"injector\"></a>injector</td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/core/Injector\" class=\"code-anchor\">Injector</a></code></label></td>\n        <td>\n          <p translation-origin=\"off\">The Angular Injector *</p>\n\n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"ngZone\"></a>ngZone</td>\n        <td><label class=\"property-type-label\"><code><a href=\"api/core/NgZone\" class=\"code-anchor\">NgZone</a></code></label></td>\n        <td>\n          <p translation-origin=\"off\">The bootstrap zone for the upgrade application</p>\n\n          \n        </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n\n    \n\n<section class=\"instance-methods\">\n  <h2 id=\"methods\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#methods\"><i class=\"material-icons\">link</i></a>Methods</h2>\n  \n    <a id=\"bootstrap\"></a>\n<table class=\"is-full-width method-table instance-method\">\n  <thead><tr><th><h3 id=\"bootstrap-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#bootstrap-1\"><i class=\"material-icons\">link</i></a>\n    bootstrap()\n    \n  </h3></th></tr></thead>\n  <tbody>\n    <tr>\n      <td>\n        <p translation-origin=\"off\">Bootstrap an AngularJS application from this NgModule</p>\n\n      </td>\n    </tr>\n  \n    <tr>\n      <td>\n        \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">bootstrap(element: Element, modules: string[] = [], config?: any)</code-example>\n\n  <h4 class=\"no-anchor\" id=\"parameters-1\">Parameters</h4>\n  <table class=\"is-full-width list-table parameters-table instance-method-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>element</td>\n      <td class=\"param-description\">\n              <p translation-origin=\"off\">the element on which to bootstrap the AngularJS application</p>\n        \n      </td>\n    </tr>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>modules</td>\n      <td class=\"param-description\">\n              <p translation-origin=\"off\">Optional. Default is <code>[]</code>.</p>\n        <p translation-origin=\"off\">the AngularJS modules to bootstrap for this application</p>\n        \n      </td>\n    </tr>\n    <tr class=\"instance-method-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>config</td>\n      <td class=\"param-description\">\n              <p translation-origin=\"off\">Optional. Default is <code>undefined</code>.</p>\n        <p translation-origin=\"off\">optional extra AngularJS bootstrap configuration</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n  \n\n  \n      </td>\n    </tr>\n  \n  </tbody>\n</table>\n\n  \n</section>\n\n\n    \n<section class=\"annotations\">\n  <h2 id=\"annotations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#annotations\"><i class=\"material-icons\">link</i></a>Annotations</h2>\n    <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ providers: [angular1Providers] })</code-example>\n    \n  \n</section>\n\n\n  \n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p translation-origin=\"off\"><code>import {<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>} from '@angular/upgrade/<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>';</code></p>\n<h2 translation-origin=\"off\" id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#example\"><i class=\"material-icons\">link</i></a>Example</h2>\n<p translation-origin=\"off\">Import the <a href=\"api/upgrade/static/UpgradeModule\"><code>UpgradeModule</code></a> into your top level <a href=\"api/core/NgModule\">Angular `NgModule`</a>.</p>\n<code-example>\n// This <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> represents the Angular pieces of the application\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [Ng2HeroesComponent, Ng1HeroComponentWrapper],\n  providers: [\n    HeroesService,\n    // Register an Angular provider whose value is the \"upgraded\" AngularJS service\n    {provide: 'titleCase', useFactory: (i: any) => i.get('titleCase'), deps: ['$injector']}\n  ],\n  // All components that are to be \"downgraded\" must be declared as `entryComponents`\n  entryComponents: [Ng2HeroesComponent],\n  // We must import `<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>` to get access to the AngularJS core services\n  imports: [<a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>]\n})\nclass Ng2AppModule {\n  ngDoBootstrap() { /* this is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> placeholder to stop the bootstrapper from complaining */\n  }\n}\n\n</code-example>\n<p translation-origin=\"off\">Then bootstrap the hybrid upgrade app's module, get hold of the <a href=\"api/upgrade/static/UpgradeModule\"><code>UpgradeModule</code></a> instance\nand use it to bootstrap the top level <a href=\"https://docs.angularjs.org/api/ng/type/angular.Module\">AngularJS\nmodule</a>.</p>\n<code-example>\n// First we bootstrap the Angular HybridModule\n// (We are using the dynamic <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> platform as this example has not been compiled AoT)\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(Ng2AppModule).then(ref => {\n  // Once Angular bootstrap is complete then we bootstrap the AngularJS module\n  const upgrade = ref.injector.get(<a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>) as <a href=\"api/upgrade/static/UpgradeModule\" class=\"code-anchor\">UpgradeModule</a>;\n  upgrade.bootstrap(document.body, [ng1AppModule.name]);\n});\n\n</code-example>\n<a id=\"upgrading-an-angular-1-service\"></a>\n<h2 translation-origin=\"off\" id=\"upgrading-an-angularjs-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/static/UpgradeModule#upgrading-an-angularjs-service\"><i class=\"material-icons\">link</i></a>Upgrading an AngularJS service</h2>\n<p translation-origin=\"off\">There is no specific API for upgrading an AngularJS service. Instead you should just follow the\nfollowing recipe:</p>\n<p translation-origin=\"off\">Let's say you have an AngularJS service:</p>\n<code-example>\n// This AngularJS service will be \"upgraded\" to be used in Angular\nng1AppModule.factory(\n    'titleCase',\n    (() => (value: string) => value.replace(/((^|\\s)[a-z])/g, (_, c) => c.toUpperCase())) as any);\n\n</code-example>\n<p translation-origin=\"off\">Then you should define an Angular provider to be included in your <a href=\"api/core/NgModule\"><code>NgModule</code></a> <code>providers</code>\nproperty.</p>\n<code-example>\n// Register an Angular provider whose value is the \"upgraded\" AngularJS service\n{provide: 'titleCase', useFactory: (i: any) => i.get('titleCase'), deps: ['$injector']}\n\n</code-example>\n<p translation-origin=\"off\">Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\nor service.</p>\n<code-example>\nconstructor(@<a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a>('titleCase') titleCase: (v: string) => string) {\n  // Change all the hero names to title case, using the \"upgraded\" AngularJS service\n  this.heroes.forEach((hero: Hero) => hero.name = titleCase(hero.name));\n}\n\n</code-example>\n\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/router/upgrade/RouterUpgradeInitializer\n - api/router/upgrade/locationSyncBootstrapListener\n - api/router/upgrade/setUpLocationSync\n - api/upgrade/static\n - api/upgrade/static/downgradeInjectable\n - guide/upgrade\n-->\n<!-- links from this doc:\n - /api\n - api/animations/browser\n - api/core/Inject\n - api/core/Injector\n - api/core/NgModule\n - api/core/NgZone\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/RouterLinkWithHref\n - api/upgrade/static\n - api/upgrade/static/UpgradeComponent\n - api/upgrade/static/UpgradeModule#\n - api/upgrade/static/UpgradeModule#%24injector\n - api/upgrade/static/UpgradeModule#annotations\n - api/upgrade/static/UpgradeModule#bootstrap\n - api/upgrade/static/UpgradeModule#bootstrap-1\n - api/upgrade/static/UpgradeModule#constructor\n - api/upgrade/static/UpgradeModule#constructor()\n - api/upgrade/static/UpgradeModule#core-angularjs-services\n - api/upgrade/static/UpgradeModule#description\n - api/upgrade/static/UpgradeModule#example\n - api/upgrade/static/UpgradeModule#how-to-use\n - api/upgrade/static/UpgradeModule#injector\n - api/upgrade/static/UpgradeModule#mental-model\n - api/upgrade/static/UpgradeModule#methods\n - api/upgrade/static/UpgradeModule#ngZone\n - api/upgrade/static/UpgradeModule#overview\n - api/upgrade/static/UpgradeModule#properties\n - api/upgrade/static/UpgradeModule#upgrademodule\n - api/upgrade/static/UpgradeModule#upgrading-an-angular-1-service\n - api/upgrade/static/UpgradeModule#upgrading-an-angularjs-service\n - api/upgrade/static/downgradeComponent\n - api/upgrade/static/downgradeInjectable\n - api?query=upgrade%2Fstatic\n - https://docs.angularjs.org/api/auto/service/$injector\n - https://docs.angularjs.org/api/ng/service\n - https://docs.angularjs.org/api/ng/type/angular.Module\n - https://github.com/angular/angular/tree/6.0.0-beta.5/packages/upgrade/src/static/upgrade_module.ts#L17-L275\n-->"
}