{
  "id": "api/common/AsyncPipe",
  "title": "\n      AsyncPipe\n    ",
  "contents": "\n\n<article>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          \n            {\n            \"@type\": \"ListItem\",\n            \"position\": 1,\n            \"item\": {\n              \"@id\": \"https://angular.io//api\",\n              \"name\": \"API\"\n            }\n          }\n            ,{\n            \"@type\": \"ListItem\",\n            \"position\": 2,\n            \"item\": {\n              \"@id\": \"https://angular.io/api/common\",\n              \"name\": \"@angular/common\"\n            }\n          }\n            ,{\n            \"@type\": \"ListItem\",\n            \"position\": 3,\n            \"item\": {\n              \"@id\": \"https://angular.io/api/common/AsyncPipe\",\n              \"name\": \"AsyncPipe\"\n            }\n          }\n        ]\n      }\n      </script>\n    \n      \n      <a href=\"/api\">API</a>\n    \n      /\n      <a href=\"api/common\">@angular/common</a>\n    \n  </div>\n  <header class=\"api-header\">\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    <label class=\"api-type-label pipe\">pipe</label>\n    <h1 id=\"asyncpipe\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#asyncpipe\"><i class=\"material-icons\">link</i></a>\n      AsyncPipe\n    </h1>\n    <span class=\"version\"></span>\n  </header>\n  <div class=\"page-actions\">\n      <a href=\"api/common/AsyncPipe#\"><label class=\"raised page-label\"><i class=\"material-icons\">mode_edit</i>suggest edits</label></a>\n      <a href=\"https://github.com/angular/angular/tree/6.0.0-beta.5/packages/common/src/pipes/async_pipe.ts#L43-L145\"><label class=\"raised page-label\"><i class=\"material-icons\">code</i>view source</label></a>\n  </div>\n\n  <div class=\"api-body\">\n    \n  \n<div class=\"what-it-does info-banner\">\n  <p translation-origin=\"off\">Unwraps a value from an asynchronous primitive.</p>\n\n</div>\n\n  \n  \n  \n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p translation-origin=\"off\"><code>observable_or_promise_expression | async</code></p>\n\n</section>\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p translation-origin=\"off\">The <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe subscribes to an <code>Observable</code> or <code>Promise</code> and returns the latest value it has\nemitted. When a new value is emitted, the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe marks the component to be checked for\nchanges. When the component gets destroyed, the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe unsubscribes automatically to avoid\npotential memory leaks.</p>\n<h2 translation-origin=\"off\" id=\"examples\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#examples\"><i class=\"material-icons\">link</i></a>Examples</h2>\n<p translation-origin=\"off\">This example binds a <code>Promise</code> to the view. Clicking the <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> button resolves the\npromise.</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'async-promise-pipe',\n  template: `&#x3C;div>\n    &#x3C;code>promise|async&#x3C;/code>: \n    &#x3C;button (click)=\"clicked()\">{{ arrived ? 'Reset' : '<a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>' }}&#x3C;/button>\n    &#x3C;span>Wait for it... {{ greeting | async }}&#x3C;/span>\n  &#x3C;/div>`\n})\nexport class AsyncPromisePipeComponent {\n  greeting: Promise&#x3C;string>|null = null;\n  arrived: boolean = false;\n\n  private resolve: Function|null = null;\n\n  constructor() { this.reset(); }\n\n  reset() {\n    this.arrived = false;\n    this.greeting = new Promise&#x3C;string>((resolve, reject) => { this.resolve = resolve; });\n  }\n\n  clicked() {\n    if (this.arrived) {\n      this.reset();\n    } else {\n      this.resolve !('hi there!');\n      this.arrived = true;\n    }\n  }\n}\n\n</code-example>\n<p translation-origin=\"off\">It's also possible to use <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> with Observables. The example below binds the <code>time</code> Observable\nto the view. The Observable continuously updates the view with the current time.</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'async-observable-pipe',\n  template: '&#x3C;div>&#x3C;code>observable|async&#x3C;/code>: <a href=\"api/common/Time\" class=\"code-anchor\">Time</a>: {{ time | async }}&#x3C;/div>'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable&#x3C;string>((observer: Subscriber&#x3C;string>) => {\n    setInterval(() => observer.next(new Date().toString()), 1000);\n  });\n}\n\n</code-example>\n\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/common\n - guide/http\n - guide/pipes\n - guide/router\n - guide/testing\n - tutorial/toh-pt6\n-->\n<!-- links from this doc:\n - /api\n - api/common\n - api/common/AsyncPipe#\n - api/common/AsyncPipe#asyncpipe\n - api/common/AsyncPipe#description\n - api/common/AsyncPipe#examples\n - api/common/AsyncPipe#how-to-use\n - api/common/Time\n - api/core/Component\n - api/core/testing/async\n - api/router/Resolve\n - https://github.com/angular/angular/tree/6.0.0-beta.5/packages/common/src/pipes/async_pipe.ts#L43-L145\n-->"
}